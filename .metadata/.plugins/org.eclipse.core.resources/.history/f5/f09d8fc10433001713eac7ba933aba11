package rahul.assingment1.validators;

import java.util.ArrayList;
import java.util.List;

import rahul.assingment1.data.IGuide;

public interface IValidate {
	static List<Character> repeatativeLiterals = new ArrayList<Character>() {
		{
			add('M');
			add('C');
			add('X');
			add('I');
		}
	};
	static List<Character> nonLiterals = new ArrayList<Character>() {
		{
			add('D');
			add('L');
			add('V');
		}
	};

	public static boolean validate(String litral) {
		return false;
	}

	public static boolean validateRepetation(String literal) {
		if (literal != null) {
			// for non repeating char
			for (Character c : nonLiterals) {
				// (.*(a).*){2,}
				String regex = "^(.*(" + c.toString() + ").*){2,}$";
				if (literal.matches(regex)) {
					System.out.println(c + " is repeated more than 1");
					return false;
				}
			}
			for (Character c : repeatativeLiterals) {
				// (m){4,}
				String regex = "^(" + c.toString() + "){4,}$";
				if (literal.matches(regex)) {
					System.out.println(c + " is repeated more than 3times in a sequence");
					return false;
				}

				// ^([^M]*M[^M]*){5,}$
				regex = "^([^" + c.toString() + "]*" + c.toString() + "[^" + c.toString() + "]*){5,}$";
				if (literal.matches(regex)) {
					System.out.println(c + " is repeated more than 4 times in a sequence");
					return false;
				}

				if (!c.equals('I')) {
					// with 4 repetition
					// ^([^M]*M[^M]*){4}$
					regex = "^([^" + c.toString() + "]*" + c.toString() + "[^" + c.toString() + "]*){4}$";
					// ^[^M]*(M){3}[^M](M)[^M]*$
					String regex2 = "^[^" + c.toString() + "]*(" + c.toString() + "){3}[^" + c.toString() + "]("
							+ c.toString() + ")[^" + c.toString() + "]*$";
					if (literal.matches(regex))
						if (!literal.matches(regex2)) {
							System.out.println(c + " repeated more than 4 not in CCCxC");
							return false;
						}
				}
			}
			return true;
		}
		return false;
	}

	public static boolean vaidateOrdering(String literal) {
		if (literal != null) {
			boolean good = true;
			char[] literalArray = literal.toCharArray();
			int index = 0;
			for (int i = 0; i < literalArray.length; i++) {
				IGuide.Literal l = new IGuide.Literal(0, literalArray[i]);
				// check if this symbol exist
				if (!IGuide.LITERALS.contains(l))
					return false;

				for (int j = 0; j < IGuide.LITERALS.size(); j++) {
					if (IGuide.LITERALS.get(j).equals(l)) {
						index = j;
						l = IGuide.LITERALS.get(j);
					}
				}

				// looking next element
				if (i < literalArray.length - 1) {
					IGuide.Literal l2 = new IGuide.Literal(0, literalArray[i + 1]);
					if (!IGuide.LITERALS.contains(l2))
						return false;
					for (int j = index; j < IGuide.LITERALS.size(); j++) {
						if (IGuide.LITERALS.get(j).equals(l)) {
							index = j;
							l2 = IGuide.LITERALS.get(j);
						}
					}
					if (l2.getValue() == 0)
						return false;
					if (l2.compareTo(l) > 0)
						return false;

					if (literalArray[i] != literalArray[i + 1]) {
						// check if the scenario with MCM
						if (i < literalArray.length - 2) {
							if (literalArray[i] == literalArray[i + 2]) {
								i = 1 + 2;
							}
						}
					}
				}
			}
			return good;
		}
		return false;
	}
}
